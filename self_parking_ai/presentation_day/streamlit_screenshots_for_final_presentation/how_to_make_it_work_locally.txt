How to Make It Work Locally (Streamlit + AVP Simulator)

1) Purpose of this document

This file serves two purposes:
1. Presentation guide ‚Äì show how to create and run the Streamlit app during the final‚Äëproject demo.
2. Feature tour ‚Äì explain what‚Äôs on the Streamlit interface using the provided screenshots and the terminology below.


2) Run Streamlit locally (recommended path)

Prerequisites
	‚Ä¢ Python 3.10+
	‚Ä¢ Git (optional)

Steps (macOS / Linux)
# 1) Clone or open project folder named "final_project_AVP"
cd final_project_AVP

# 2) (Recommended) Create & activate a virtual environment
python3 -m venv .venv
source .venv/bin/activate

# 3) Install requirements for Streamlit at terminal:
pip install -r requirements_streamlit.txt

# 4) Run the Streamlit app 
streamlit run app.py

Steps (Windows PowerShell): skipped here

The browser will open automatically. If it doesn‚Äôt, copy the local URL from the terminal (e.g., http://localhost:8501) into your browser.

üîß Common fixes
‚Ä¢ ‚ÄúInvalid value: File does not exist: app.py‚Äù: make sure you are in the same folder where app.py lives (e.g., final_project_AVP/) before running the command.
‚Ä¢ ‚ÄúPort already in use‚Äù: run streamlit run app.py --server.port 8502.



Explanation of this folder "streamlit_screenshots_for_final_presentation":
Under folder artifacts/streamlit_screenshots_for_final_presentation, there are Streamlit screenshots 1‚Äì5. 

Screenshot 1 ‚Äî Landing view
	‚Ä¢	What the page looks like right after launch from the terminal.
	‚Ä¢	Top: title and description.
	‚Ä¢	Left sidebar: input controls (spot size, car size preset, distance to spot, etc.).
	‚Ä¢	Main panel: plotted parking bay (green rectangle) and the planned path.

Screenshot 2 ‚Äî Forward parking path
	‚Ä¢	From the left sidebar inputs at the bottom, the app generates a forward parking trajectory made of:
		1. pathA ‚Äì first B√©zier curve (initial steering).
		2. pathS ‚Äì a short straight segment (forward drive).
		3. pathB ‚Äì second B√©zier curve (final alignment).
	‚Ä¢	The green rectangle is the parking bay, sized by sidebar parameters.
	‚Ä¢	Car size is given as a percentage of the bay (so the path is feasible and avoids scraping).
	‚Ä¢	Inset keeps a safe gap from the bay line.
	‚Ä¢	(Roadmap) Reverse strategy is more complex; current demo focuses on forward parking for clarity.
	‚Ä¢	The car aligns by rear‚Äëbumper to the bay and stops when inside.

Key functions behind this (implemented in streamlit_sandbox.ipynb and copied into app.py as needed):
	‚Ä¢	generate_path_for_strategy(...) ‚Äì builds the path (Bezier S‚Äëshape for reverse concept; straight + curves for forward).
	‚Ä¢	generate_bezier_curve(nA, nS, nB) ‚Äì quadratic B√©zier using control points:
	‚Ä¢	A = start (rear bumper)
	‚Ä¢	S = steering control point
	‚Ä¢	B = end (target inside the bay)

Screenshots 3 & 4 ‚Äî The exported path file (for Webots)
	‚Ä¢	The app can export a CSV of planned states to path.csv.
	‚Ä¢	Each row contains x, y, heading_deg (world coordinates).

What are x, y, heading_deg?
	‚Ä¢	x ‚Äì position along the global X‚Äëaxis (meters)
	‚Ä¢	y ‚Äì position along the global Y‚Äëaxis (meters)
	‚Ä¢	heading_deg ‚Äì vehicle orientation in degrees, measured from the X‚Äëaxis

Examples
	‚Ä¢	(x=15, y=3, heading_deg=90) = 15 m right, 3 m up, facing ‚Äúnorth‚Äù (perpendicular to the bay).
	‚Ä¢	(x=0, y=0, heading_deg=0) = at origin, facing along +X.

These are used to plot in Streamlit and to replay in Webots (pure‚Äëpursuit/PID).

Screenshot 5 ‚Äî Sidebar controls (terminology)
	‚Ä¢	Spot length/width: size of the parking bay (meters).
	‚Ä¢	Car size preset: car length/width as a percentage of the bay (keeps path feasible).
	‚Ä¢	Distance to spot: initial longitudinal gap before entering the bay.
	‚Ä¢	Rear bumper inset: how far the rear bumper should end inside the bay line.
	‚Ä¢	Wheelbase, max steer (if present): vehicle kinematics used for path curvature and controller tuning.

‚∏ª

5) How Streamlit and Webots connect (CSV bridge)
	‚Ä¢	When you click Export (or the app auto‚Äësaves), Streamlit writes path.csv with x, y, heading_deg.
	‚Ä¢	In Webots controller (e.g., avp_free.py), you configure:
CSV_FILE = os.path.join(os.path.dirname(__file__), "path.csv")
	‚Ä¢	Webots reads those waypoints and executes them with pure‚Äëpursuit or PID.

One last sentence from Emily: if you want to go through Ngrok, the notebook streamlit_sandbox.ipynb has the codes, I can show during presentation. The file Streamlit works on is app.py whose path is: final_project_AVP/self_parking_ai/app.py


